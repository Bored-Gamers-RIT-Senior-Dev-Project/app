import ExpandMoreIcon from "@mui/icons-material/ExpandMore";
import {
    Accordion,
    AccordionDetails,
    AccordionSummary,
    Box,
    Button,
    CircularProgress,
    Dialog,
    DialogActions,
    DialogContent,
    DialogTitle,
    Grid,
    MenuItem,
    Paper,
    Select,
    TextField,
    Typography,
} from "@mui/material";
import { AdapterDateFns } from "@mui/x-date-pickers/AdapterDateFns";
import { DatePicker } from "@mui/x-date-pickers/DatePicker";
import { LocalizationProvider } from "@mui/x-date-pickers/LocalizationProvider";
import { useEffect, useState } from "react";
import { useNavigate } from "react-router";
import { API_URL } from "../utils/api";

const ActionsCellRenderer = ({ navigate, data }) => (
    <Box>
        <Tooltip title="Edit User">
            <IconButton onClick={() => navigate(`./editUser/${data.userId}`)}>
                <Edit />
            </IconButton>
        </Tooltip>
        <Tooltip title="Delete User">
            <IconButton onClick={() => navigate(`./deleteUser/${data.userId}`)}>
                <Delete />
            </IconButton>
        </Tooltip>
    </Box>
);
//Proptypes generated by copilot
ActionsCellRenderer.propTypes = {
    navigate: propTypes.func.isRequired,
    data: propTypes.object.isRequired,
};

const AdminDashboard = () => {
    const [search, setSearch] = useState("");
    const [anchorEl, setAnchorEl] = useState(null);
    const navigate = useNavigate();

    const rowData = useLoaderData();

    const handleMenuOpen = (event) => setAnchorEl(event.currentTarget);
    const handleMenuClose = () => setAnchorEl(null);

    const columnDefs = [
        {
            headerName: "ID",
            field: "userId",
            flex: 0.5,
            sortable: true,
            filter: true,
        },
        {
            headerName: "Username",
            field: "username",
            flex: 1,
            sortable: true,
            filter: true,
        },
        {
            headerName: "E-Mail",
            field: "email",
            flex: 1.5,
            sortable: true,
            filter: true,
        },
        {
            headerName: "Created On",
            field: "createdAt",
            flex: 1,
            sortable: true,
            valueGetter: ({ data }) => (data ? new Date(data.createdAt) : null),
            valueFormatter: ({ value }) => new Date(value).toLocaleString(),
            filter: "agDateColumnFilter",
        },
        {
            headerName: "University",
            field: "universityName",
            flex: 1.5,
            sortable: true,
            filter: true,
        },
        {
            headerName: "Team Name",
            field: "teamName",
            flex: 1,
            sortable: true,
            filter: true,
        },
        {
            headerName: "Role",
            field: "roleName",
            flex: 1,
            sortable: true,
            filter: true,
        },
        {
            headerName: "Actions",
            flex: 1,
            cellRenderer: ({ data }) => (
                <ActionsCellRenderer data={data} navigate={navigate} />
            ),
        },
    ];

    return (
        <Paper
            sx={{
                width: "1200px",
                height: "80%",
                display: "flex",
                flexDirection: "column",
                alignItems: "center",
                padding: "1em",
            }}
        >
            <Typography variant="h4" mb={2} textAlign="center">
                Admin Dashboard
            </Typography>
            <Box
                display="flex"
                justifyContent="space-between"
                alignItems="center"
                mb={2}
                width="100%"
            >
                <TextField
                    label="Search"
                    variant="outlined"
                    size="small"
                    value={search}
                    onChange={(e) => setSearch(e.target.value)}
                    slotProps={{
                        input: {
                            startAdornment: (
                                <InputAdornment position="start">
                                    <SearchIcon />
                                </InputAdornment>
                            ),
                        },
                    }}
                    sx={{ width: "300px" }}
                />
                <Button
                    variant="contained"
                    onClick={handleMenuOpen}
                    sx={{ minWidth: "150px" }}
                >
                    Add
                </Button>
                <Menu
                    anchorEl={anchorEl}
                    open={Boolean(anchorEl)}
                    onClose={handleMenuClose}
                >
                    <MenuItem onClick={() => navigate("./addUser")}>
                        New User
                    </MenuItem>
                    <MenuItem onClick={() => navigate("./addUniversity")}>
                        New University
                    </MenuItem>
                </Menu>
            </Box>
            <Typography variant="h5" sx={{ textAlign: "left", width: "100%" }}>
                Users
            </Typography>
            <Grid rowData={rowData} columnDefs={columnDefs} pagination />
            <Outlet />
        </Paper>
    );
};

export { AdminDashboard };
